{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome!</p>"},{"location":"guide/","title":"Guide","text":"<p>stub</p>"},{"location":"libraries/libfb/","title":"libfb","text":"<p>A simple framebuffer library</p>"},{"location":"libraries/libfb/#types","title":"Types","text":"<ul> <li>The actual framebuffer object.     <pre><code>typedef struct {\n    int fd;\n    uint8_t *fbmem;       /* mapped framebuffer */\n    size_t screensize;\n    unsigned width;\n    unsigned height;\n    unsigned bpp;\n    unsigned line_length;\n\n    /* optional software back buffer */\n    uint8_t *backbuf;\n} fb_t;\n</code></pre></li> <li>A colour object. Effectively a tuple     <pre><code>typedef struct {\n    uint8_t r, g, b;\n} color_t;\n</code></pre></li> </ul>"},{"location":"libraries/libfb/#functions","title":"Functions","text":"<ul> <li>Initialises a framebuffer object.     <pre><code>fb_t fb_init(void);\n</code></pre></li> <li>Opens a framebuffer device into the object     <pre><code>int fb_open(fb_t *fb, const char *dev);\n</code></pre></li> <li>Closes the framebuffer device and unmaps memory     <pre><code>void fb_close(fb_t *fb);\n</code></pre></li> </ul>"},{"location":"libraries/libfb/#drawing-primitives","title":"Drawing Primitives","text":"<ul> <li>Clears the screen     <pre><code>void fb_clear(const fb_t *fb, color_t c);\n</code></pre></li> <li>Draws a pixel at the specified coordinate     <pre><code>void fb_putpixel(const fb_t *fb, unsigned x, unsigned y, color_t c);\n</code></pre></li> <li>Draws a horizontal line     <pre><code>void fb_hline(const fb_t *fb, unsigned x, unsigned y, unsigned w, color_t c);\n</code></pre></li> <li>Draws a vertical line     <pre><code>void fb_vline(const fb_t *fb, unsigned x, unsigned y, unsigned h, color_t c);\n</code></pre></li> <li>Draws a filled rectangle     <pre><code>void fb_fillrect(const fb_t *fb, unsigned x, unsigned y, unsigned w, unsigned h, color_t c);\n</code></pre></li> <li>Draws a rectangle outline     <pre><code>void fb_fillrect(const fb_t *fb, unsigned x, unsigned y, unsigned w, unsigned h, color_t c);\n</code></pre></li> <li>Draws a line between 2 points     <pre><code>void fb_line(const fb_t *fb, int x0, int y0, int x1, int y1, color_t c);\n</code></pre></li> <li>Draws a single character     <pre><code>void fb_draw_char(const fb_t *fb, unsigned x, unsigned y,\n              char ch, color_t fg, color_t bg);\n</code></pre></li> <li>Draws a string     <pre><code>void fb_draw_string(const fb_t *fb, unsigned x, unsigned y,\n                const char *str, color_t fg, color_t bg);\n</code></pre></li> <li>Flips the back and the front buffer     <pre><code>void fb_flip(const fb_t* fb);\n</code></pre></li> </ul>"},{"location":"libraries/libfb/#macros","title":"Macros","text":"<ul> <li>Creates a colour object     <pre><code>#define COLOR(r,g,b) ((color_t){(r),(g),(b)})\n</code></pre></li> <li>Creates a colour object using a preset     <pre><code>#define COLOR_BLACK  COLOR(0,0,0)\n#define COLOR_WHITE  COLOR(255,255,255)\n#define COLOR_RED    COLOR(255,0,0)\n#define COLOR_GREEN  COLOR(0,255,0)\n#define COLOR_BLUE   COLOR(0,0,255)\n</code></pre></li> </ul>"},{"location":"libraries/liblog/","title":"liblog","text":"<p>A basic logging library</p>"},{"location":"libraries/liblog/#types","title":"Types","text":"<ul> <li>The different types of logging severity     <pre><code>typedef enum { \n    LOG_DEBUG, \n    LOG_INFO, \n    LOG_WARN, \n    LOG_ERROR \n} log_level_t;\n</code></pre></li> </ul>"},{"location":"libraries/liblog/#functions","title":"Functions","text":"<ul> <li>Sets up the logging library. If not called, <code>file</code> is set to <code>/log/unknown.log</code>, and <code>level</code> is set to <code>LOG_INFO</code> <pre><code>void log_init(const char* file, const log_level_t level);\n</code></pre></li> <li>Writes a formatted string, along with timestamp and colour-coded log level     <pre><code>void log_console_level(log_level_t level, const char *fmt, ...);\n</code></pre></li> </ul>"},{"location":"libraries/liblog/#macros","title":"Macros","text":"<ul> <li>Wrappers for <code>log_console_level()</code>, automatically inputting the correct log level     <pre><code>#define log_debug(fmt, ...) log_console_level(LOG_DEBUG, fmt, ##__VA_ARGS__)\n#define log_info(fmt, ...)  log_console_level(LOG_INFO, fmt, ##__VA_ARGS__)\n#define log_warn(fmt, ...)  log_console_level(LOG_WARN, fmt, ##__VA_ARGS__)\n#define log_error(fmt, ...) log_console_level(LOG_ERROR, fmt, ##__VA_ARGS__)\n</code></pre></li> <li>Wrapper for <code>log_error</code>, formatted like <code>perror()</code> <pre><code>#define log_perror(err) log_console_level(LOG_ERROR, \"%s: %s\\n\", err, strerror(errno))\n</code></pre></li> </ul>"},{"location":"libraries/liblog/#variables","title":"Variables","text":"<ul> <li>Current set minimum level to log. If you attempt to log using a level lower than this, it is ignored.     <pre><code>extern int loglevel;\n</code></pre></li> <li>Current set outputted logging file.     <pre><code>extern char* logfile;\n</code></pre></li> </ul>"}]}